package com.game;

import static com.game.model.GameContext.getPlayerInfo;

import java.util.Iterator;
import java.util.List;

import com.game.model.ErrorDetails;
import com.game.model.GameContext;
import com.game.model.GreenCard;
import com.game.model.RedCard;
import com.game.strategy.GameStrategy;
import lombok.SneakyThrows;

public class GameApplication {

    /**
     * –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ: I –∏–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü–∏—è –≤—Å–µ—Ö –ø—Ä–∞–≤–∏–ª 1) –∫–∞—Ä—Ç—ã –∏–≥—Ä–∞—Ç—å –Ω–∞ —Å–æ–≤–º–µ—Å—Ç–Ω–æ –∏ –Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞. –ù–∞ –∫–æ–≥–æ –∞—Ñ—Ñ–µ–∫—Ç–∏—Ç—å—Å—è
     * –±–æ–Ω—É—Å –∏ —Ü–µ–Ω–∞ 2) –∑–µ–ª–µ–Ω—ã–µ –∫–∞—Ä—Ç—ã 3) –∫–∞—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ 4) –æ—Å–æ–±—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∫–∞—Ä—Ç
     * <p>
     * II –∏–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å—å—é—Ç–∞ –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è –∑–µ–ª–µ–Ω—ã—Ö –∫–∞—Ä—Ç –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è —á–µ—Ä—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
     * –∏–≥—Ä–æ–∫–æ–≤ –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏–≥—Ä—ã –ò–ò –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª –¥–æ–±–æ—Ä–∞ –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª –∫–æ–ª–æ–¥ –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª
     * –∫–æ–≥–¥–∞ –Ω–µ—á–µ–º –ø–æ—Ö–æ–¥–∏—Ç—å –ø–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–¥–∏—Å–ø–µ—Ä—Å–∏—è, –º–∞–∫—Å, –º–∏–Ω)
     * <p>
     * III —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —É—á–µ—Ç –∫–∞—Ä—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞
     *
     * –ü–õ–ê–ù:
     * –∑–∞–∫—Ä—ã—Ç—å –¢–ûDO 0 - 8 –∫–∞—Ä—Ç –∑–µ–ª–µ–Ω—ã—Ö –∏ 8 —Å–∏–Ω–∏—Ö –∫–∞—Ä—Ç
     * –∑–∞—Ç–µ–º  - —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫—Ä–∞—Å–Ω—ã–µ –∏
     * —Ç–æ–≥–¥–∞ —Å–º–æ–≥—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä—É —Ö–æ–¥–æ–≤.
     *
     *
     */

    @SneakyThrows
    public static void main(String[] args) {
//      String appProperties = "application_small.properties";
        String appProperties = "application.properties";

        // init game
        GameSimulationSuiteResult simulationResult = new GameSimulationSuiteResult();
        Iterator<GameContext> gameContextIterator = new GameSimulationSuiteFactory(appProperties).initAndGetIterator();
        while (gameContextIterator.hasNext()) {
            GameContext gameContext = gameContextIterator.next();
            var strategy = new GameStrategy(gameContext);
            runTheGame(gameContext, strategy);
//            System.out.println(gameContext);
            System.out.println("all cards:" + gameContext.assertCountAllBlueCardsInGame());

            // calculate result
            var result = new DetailedGameResult(gameContext);
            System.out.println(result);
            simulationResult.add(result);
        }
        System.out.println(simulationResult.summarize());
    }

    private static void runTheGame(GameContext gameContext, GameStrategy strategy) {
        gameContext.getEventDeck().resetCounters();
        gameContext.getBlueDecks().resetCounters();
        // run game
        try {
            List<RedCard> list = gameContext.getRelationshipDeck().getCards();
            for (int round = 1; round < list.size() + 1; round++) {
                // init round
                RedCard redCard = list.get(round - 1);
                gameContext.initRound(round, redCard);
                strategy.drawCardsAtTheBeginningOfTheRound();

                // Mon - Sat
                int day = 1;
                for (; day <= 6; day++) {
                    // breakPoint if needed
                    if (round == 1 && day == 6) {
                        int u = 0;
                    }
                    gameContext.setCurrentDay(day);
                    System.out.println("all cards:" + gameContext.assertCountAllBlueCardsInGame());
                    strategy.prePlan();
                    GreenCard card1 = gameContext.getEventDeck().checkOnEvent(day);
                    GreenCard card2 = gameContext.getEventDeck().checkOnEvent(day);
                    strategy.playTurn(card1, card2);
                    // –≤–µ—Ä—Å–∏—è –ø—Ä–∞–≤–∏–ª —Ç–∞–∫–∞—è. –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥—Ä—É–≥—É—é –≤–µ—Ä—Å–∏—é
                    if (day == 3) {
                        strategy.drawCardsDuringDay();
                    }
                }
                // Sun
                gameContext.setCurrentDay(day);
                strategy.prePlan();
                strategy.playTurn(null, null);

                // end of round
                gameContext.calcRedAndOrangeCardsAtTheEndOfTheRound(redCard);

                if (round == 6 && day == 7) {
                    int u = 0;
                }
                System.out.println("all cards:" + gameContext.assertCountAllBlueCardsInGame());
                strategy.saveCards();
                System.out.println("all cards:" + gameContext.assertCountAllBlueCardsInGame());
                gameContext.clearCards();

                System.out.println("all cards:" + gameContext.assertCountAllBlueCardsInGame());

            }
        } catch (Exception e) {
            String info = gameContext.getRoundDayString() + "\n"
                + getPlayerInfo(gameContext.getPlayer1Hand(), gameContext.getPlayers().getPlayer1())
                + getPlayerInfo(gameContext.getPlayer2Hand(), gameContext.getPlayers().getPlayer2());
            System.err.println("Error at:" + e + "\n" + info);

            String message = e.getMessage();
            if (e instanceof ArrayIndexOutOfBoundsException){
                throw new Error(e);
            }
            if (e instanceof NullPointerException){
                message +=" " + e.getStackTrace()[0].toString();
            }
            gameContext.setError(new ErrorDetails(
                e,
                info,
                gameContext.getRoundDayString(),
                e.getClass().getName(),
                message));

        }
    }


}

// some strategy
//Run count: 10000
//WIN_WEDDING - 39% (3933),
//BROKE_UP_AS_FRIENDS - 45% (4547),
//BROKE_UP_AS_ENEMIES - 9% (976),
//ERROR - 5% (544)
//In average:
// Player1: {171 üéÇ}, [15üí•]		14üí∞		3 üí™
// Player2: {95 üéÇ}, [10üí•]		34üí∞		3 üí™

// random strategy
//
//    Run count: 10000
//    WIN_WEDDING - 0% (18),
//    BROKE_UP_AS_FRIENDS - 34% (3454),
//    BROKE_UP_AS_ENEMIES - 22% (2253),
//    ERROR - 42% (4275)
//    In average:
//    Player1: {171 üéÇ}, [15üí•]		7üí∞		2 üí™
//    Player2: {58 üéÇ}, [14üí•]		10üí∞		1 üí™